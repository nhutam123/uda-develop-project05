# TODO: Change the name of the org
org: tamln2
app: serverless-student-management
service: serverless-student-management

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'test'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    UDACITY_PROJECT_NAME: tamln2-serveless-${self:provider.stage}
    STUDENTS_TABLE: tamln2-serverless-${self:provider.stage}
    S3_BUCKET_NAME: tamln2-serverless-${self:provider.stage}

custom:
  documentation:
    api:
      info:
        version: "1.0.0"
        title: serverless-api
        description: serverless-api
    models:
      - name: CreateStudentRequest
        contentType: "application/json"
        schema:
          required:
            - name
            - dueDate
          properties:
            name:
              minLength: 1
              type: string
            dueDate:
              type: string
      - name: UpdateStudentRequest
        contentType: "application/json"
        schema:
          required:
            - name
            - dueDate
            - isGraduated
          properties:
            name:
              minLength: 1
              type: string
            dueDate:
              type: string
            isGraduated:
              type: boolean

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetStudents:
    handler: src/lambda/http/getStudents.handler
    events:
      - http:
          method: get
          path: students
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.UDACITY_PROJECT_NAME}-get-student-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STUDENTS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"

  # Create Student
  CreateStudent:
    handler: src/lambda/http/createStudent.handler
    events:
      - http:
          method: post
          path: students
          cors: true
          authorizer: Auth
          documentation:
            summary: "Create a new student item"
            description: "Create a new student item"
            requestModels:
              "application/json": CreateStudentRequest
          reqValidatorName: RequestBodyValidator
    iamRoleStatementsName: ${self:provider.environment.UDACITY_PROJECT_NAME}-create-student-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STUDENTS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"

  # Update student
  UpdateStudent:
    handler: src/lambda/http/updateStudent.handler
    events:
      - http:
          method: patch
          path: students/{studentId}
          cors: true
          authorizer: Auth
          documentation:
            summary: "Update a student item"
            description: "Update a student item"
            requestModels:
              "application/json": UpdateStudentRequest
          reqValidatorName: RequestBodyValidator
    iamRoleStatementsName: ${self:provider.environment.UDACITY_PROJECT_NAME}-update-student-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STUDENTS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"

  # Delete Student
  DeleteStudent:
    handler: src/lambda/http/deleteStudent.handler
    events:
      - http:
          method: delete
          path: students/{studentId}
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.UDACITY_PROJECT_NAME}-delete-student-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STUDENTS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: students/{studentId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.UDACITY_PROJECT_NAME}-s3-upload-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STUDENTS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"

resources:
  Resources:
    StudentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: studentId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: studentId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.STUDENTS_TABLE}
    onlyBody:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: "only-body"
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: "request-body-validator"
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    # Response for Err status 4xx
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    # Response for Err status 5xx
    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: ApiGatewayRestApi

    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*"
        Bucket: !Ref AttachmentsBucket
